services:
  web:
    hostname: web
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      mongo:
        condition: service_healthy
    build:
      context: ..
      dockerfile: Example/SaveApis.Core.Example/Dockerfile
    environment:
      - SAVEAPIS_LOG_LEVEL=Information

      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=80

      - HANGFIRE_REDIS_NAME=example
      - HANGFIRE_REDIS_HOST=redis
      - HANGFIRE_REDIS_PORT=6379
      - HANGFIRE_REDIS_DATABASE=0
      - HANGFIRE_REDIS_USERNAME=example
      - HANGFIRE_REDIS_PASSWORD=example
      - HANGFIRE_REDIS_SSL=False

      - JWT_ISSUER=example
      - JWT_AUDIENCE=example
      - JWT_KEY=yourRandomWith64OrMoreLengthKeyWhichShouldBeStoredSafetyAndShouldNotBeSharedWithOtherPeople
      - JWT_EXPIRATION_IN_HOURS=8

      - EASYCACHING_REDIS_HOST=redis
      - EASYCACHING_REDIS_PORT=6379
      - EASYCACHING_REDIS_DATABASE=1
      - EASYCACHING_REDIS_BUS_DATABASE=2

      - MONGO_SRV=false
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MONGO_USER=example
      - MONGO_PASSWORD=example

      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=example
      - MYSQL_DATABASE=example
    ports:
      - "80:80"
  redis:
    hostname: redis
    image: redis:8.0-M01-bookworm
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
  mysql:
    hostname: mysql
    image: mysql:9.1.0
    environment:
      MYSQL_ROOT_PASSWORD: example
      MYSQL_DATABASE: example
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 3s
  mongo:
    hostname: mongo
    image: mongo:8.0.3
    environment:
      - MONGO_INITDB_ROOT_USERNAME=example
      - MONGO_INITDB_ROOT_PASSWORD=example
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s

volumes:
  redis-data:
  mysql-data:
  mongo-data:
  mongo-config: