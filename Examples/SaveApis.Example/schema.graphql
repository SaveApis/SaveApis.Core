# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost(
    "The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc."
    weight: String!
) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

type Mutation {
    administratorToken: String!
    managerToken: String!
    testCommand(test: String!): String!
    userToken: String!
}

type Query {
    administrator: String!
    anonym: String!
    authenticated: String!
    testEntities: [TestGetDto!]!
    testQuery(test: String!): String!
}

type TestGetDto {
    description: String!
    id: UUID!
    name: String!
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
    "After the resolver was executed."
    AFTER_RESOLVER
    "Before the resolver was executed."
    BEFORE_RESOLVER
    "The policy is applied in the validation step before the execution."
    VALIDATION
}

scalar UUID
